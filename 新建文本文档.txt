

<p>表格页第一版想法</p>
<p>1 声明data 按照功能划分 搜索项/分页/排序/表格列属性</p>
<p>2 声明method 按照功能划分 搜索/分页/排序方法全部内置</p>


<p>表格页第二版想法</p>
<p>1 声明data 按照功能划分 搜索项/分页/排序/表格列属性</p>
<p>2 声明method写成minxin 来混入 </p>









<p>我的想法是 各个模块的逻辑都大同小异</p>
<p>表格(搜索/排序/分页) 按钮(ajax下发/跳转) 表单(校验/转换格式/提交/跳转)</p>
<p>本来是挺简单的一套逻辑 或者叫 一系列功能</p>
<p>菜鸟的行为是 反正方法声明简单 不开eslint没人管 我随便起名 随便放 能执行就行</p>
<p>我擦擦擦擦 苦的是后期维护的人和接手的人</p>
<p>因此 我在这里定义一套 [[约定俗成的编码规则]] 要求和我合作的人必须遵守或者改进</p>
<p class="text-danger">1 本规范定义与2019年10月19日 第一版本 如和旧版本冲突默认遵守本版本</p>
<p class="text-danger">2 因为有了mode编译压缩 所有变量/方法/临时方法 必须写注释</p>
<p class="text-danger">3 vue编程templete必须放第一位 方便第一眼看出来这是什么页面</p>
<p class="text-danger">3 vue编程script必须放第二位 其vue各个属性按照eslint规律排列</p>
<p class="text-danger">3 vue编程style必须放第三位 必须scoped 其样式模块化 零散样式进入样式库</p>
<p class="text-danger">4 vue编程tab必须抽取组件</p>
<p class="text-danger">5 编码风格因人而异 不再强求 但要保证第一要点 易读</p>
<p class="text-danger">5 易读的描述 缩进必须严谨 能一行写就一行 不要太长 多写注释</p>
<p class="text-danger">6 所有的绑定事件触发的函数统一 hendleXxxx命名 按堆排放</p>
<p class="text-danger">6 所有的绑定变量按堆排放 例如表格变量都放在obj中</p>
<p class="text-danger"></p>
<p></p>


<h3>如何使用vue.js构造modal(弹窗)组件?</h3>
<p>问题就是,构造一个modal组件,如何在需要的时候动态异步的插入到dom里</p>
<p>作者：尤雨溪</p>
<p>大神的观点是 为什么一定要异步插入？</p>
<p>其实以前也有一些用户跟我纠结过这个问题，他们觉得一定要在需要的时候创建这个组件才是符合他们思维的做法。在我看来，这是没有理解『状态驱动的界面』的一种表现。</p>
<p>作者：柳家忍</p>
<p>这道题我要强答一下，虽然 尤雨溪 大神说得非常在理，但是异步加载模态框也很一种很常见的需求，毕竟页面初次渲染的时候模态框部分的资源加载没有啥意义，因为操作完页面都可能用不到模态框，而如果模态框的内容比较重就造成请求资源的浪费了。（或许有时候我们该忽略这种浪费？）</p>
<p>作者：骗你是小猫咪</p>
<p>项目用到了大量的modal，正在考虑……主要思路：</p>
<p>1. 一个vue文件就是一个modal</p>
<p>2. modal可以复用（显示的文字可以通过参数来决定）</p>
<p>3. 使用的时候直接this.$modal.要使用的modal框名字</p>
<p>4. 这个modal是个promise，这样我就可以根据它的状态来确定我在modal上的状态（确定，取消，关闭啥的）</p>
<p>5. 使用者不关心它的层级（z-index）</p>
<p>vue提供了use方法来安装插件还是很便利的补充：该插件的用法和angularjs的uiModal很类似，自定义modal模板和逻辑，用的时候直接用过this来使用，并且可以弹窗之上再弹窗，俗称弹弹弹……鱼尾纹</p>
<p></p>
<p>想歪了 我决定尝试 modal封装组件 需要者自行引入</p>
<p></p>
<p></p>
<p></p>




<p>如何动态的创建并加载一个vue组件</p>
<p>https://segmentfault.com/a/1190000005132807</p>