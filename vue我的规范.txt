模块分离 简介         强迫症的首选
模块分离 更低耦合    想去就去 想换框架就换框架
模块分离 代码集中    相同逻辑的代码集中在一起 想互相借鉴 评审 变的方便了
模块分离 各司其职    什么功能去什么模块 方便后期维护 方便他人就是升华自己
模块分离 层级明确

    内容描述
    实际项目问题
    推荐意图

    举个栗子

    一群妖怪盖房子
    洋葱头妖怪头领因为长的高大, 一只手就搞定了盖房子的事情,
    但是他懒他不干 于是所有他手下的洋葱头小喽啰每人拿一块砖头哼哧哼哧的盖房子

    这个例子对应的项目问题有

    1 vue/iview 全局配置不能声明在每个业务页面内
    2 全局样式不能声明在各种结构内
    3 非超常用组件不能声明在全局配置中

    模块功能细分不明确
    一级结构可以做到的 不要分散排分任务到所有的下级
    只是某个小分支需要的 不要声明加载在全局

代码清晰 ESlint 团队开发规范
代码清晰 易读性
代码清晰 注释注释注释
代码清晰 ES6学习


代码清晰 名称语义化

    1 需要用户手动触发的方法起名以handle开头来表达调用方式
    2 在1的基础上使用英文(超过8个字母则适当使用缩写)开头来表达功能
    3 在12的基础上如果方法体内存在异步调用(请尽量使用api模块来规范)使用Ajax作为结尾来暗示评审者这里暗含请求
    4 满足所有情况下 将所有的方法按照功能模块来顺序放置
    5 如果有重复的功能按钮 则使用xxxxx4other 4=for 即在主线外有分线 如果均为分线 则都加上for
    6 分线之后注明分线的功能 如 xxxx4UserEdit 
    6 分线最后要注明分线的触发方式 如 model代表弹框内容
    6 一些每个页面只有一次使用的方法 强制指定名字 如init
    
    handle 可以使用在 @click @on-change @bulr 只要是用户点击触发的弟一样业务逻辑均可使用
    get/set 指设置某些页面变量 如果你的方法主要是ajax 就不要用了

    init // 代表 [页面初始化]

    handleDownload // 代表 [用户触发][下载] 功能
    handleSearch // 代表 [用户触发][搜索] 功能
    hendleGopage // 代表 [用户触发][切换分页] 功能
    handleOrder // 代表 [用户触发][排序] 功能
    hendleReset // 代表 [用户触发][重置] 功能

    handleSubmitAjax //代表 [用户触发][表单提交][ajax请求] 功能
    handleSubmitAjax4UserEditModel //代表 [用户触发][表单提交][ajax请求][用户编辑][弹窗] 功能
