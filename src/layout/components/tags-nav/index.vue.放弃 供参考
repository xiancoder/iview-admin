<template>
    <div class="tags-nav">
        <div class="close-con">
            <Dropdown transfer @on-click="handleTagsOption" style="margin-top:7px;">
                <Button size="small" type="text">
                    <Icon :size="18" type="ios-close-circle-outline" />
                </Button>
                <DropdownMenu slot="list">
                    <DropdownItem name="close-all">关闭所有</DropdownItem>
                    <DropdownItem name="close-others">关闭其他</DropdownItem>
                </DropdownMenu>
            </Dropdown>
        </div>
        <div class="btn-con left-btn">
            <Button type="text" @click="handleScroll(240)">
                <Icon :size="18" type="ios-arrow-back" />
            </Button>
        </div>
        <div class="btn-con right-btn">
            <Button type="text" @click="handleScroll(-240)">
                <Icon :size="18" type="ios-arrow-forward" />
            </Button>
        </div>
        <div class="scroll-outer" ref="scrollOuter" @DOMMouseScroll="handlescroll" @mousewheel="handlescroll">
            <div ref="scrollBody" class="scroll-body" :style="{left: tagBodyLeft + 'px'}">
                <transition-group name="taglist-moving-animation">
                    <Tag
                        type="dot"
                        key="tag-nav-main"
                        :color="isCurrentTag({name:homePage}) ? 'primary' : 'default'"
                        @click.native="handleClick({name:homePage})"
                    >首页</Tag>
                    <Tag
                        type="dot"
                        v-for="(item, index) in list"
                        ref="tagsPageOpened"
                        :key="`tag-nav-${index}`"
                        :name="item.name"
                        :data-route-item="item"
                        :closable="item.name !== homePage"
                        :color="isCurrentTag(item) ? 'primary' : 'default'"
                        @on-close="handleClose(item)"
                        @click.native="handleClick(item)"
                        @contextmenu.prevent.native="contextMenu(item, $event)"
                    >{{ item.title }}</Tag>
                </transition-group>
            </div>
        </div>
    </div>
</template>

<script>
import beforeCloseFun from '@/mixin/router.beforeCloseFun'
import { routeEqual } from '@/router/util'
import { homePage } from '@/router/routers'

export default {
    name: 'TagsNav',
    data () {
        return {
            homePage,
            tagBodyLeft: 0,
            rightOffset: 40,
            outerPadding: 4,
            contextMenuLeft: 0,
            contextMenuTop: 0,
            visible: false,
            menuList: {
                others: '关闭其他',
                all: '关闭所有'
            }
        }
    },
    computed: {
        list () { return this.$store.state.route.tagNavList || [] }, // 历史记录tab
        currentRouteName () { return this.$route.name } // 当前路由
    },
    methods: {
        handlescroll (e) {
            var type = e.type
            let delta = 0
            if (type === 'DOMMouseScroll' || type === 'mousewheel') {
                delta = (e.wheelDelta) ? e.wheelDelta : -(e.detail || 0) * 40
            }
            this.handleScroll(delta)
        },
        handleScroll (offset) {
            const outerWidth = this.$refs.scrollOuter.offsetWidth
            const bodyWidth = this.$refs.scrollBody.offsetWidth
            if (offset > 0) {
                this.tagBodyLeft = Math.min(0, this.tagBodyLeft + offset)
            } else {
                if (outerWidth < bodyWidth) {
                    if (this.tagBodyLeft < -(bodyWidth - outerWidth)) {
                        this.tagBodyLeft = this.tagBodyLeft
                    } else {
                        this.tagBodyLeft = Math.max(this.tagBodyLeft + offset, outerWidth - bodyWidth)
                    }
                } else {
                    this.tagBodyLeft = 0
                }
            }
        },
        handleTagsOption (type) { // 关闭其他 关闭所有
            if (type.includes('all')) { // 关闭所有
                this.handleCloseTag([], {name: this.currentRouteName})
            } else if (type.includes('others')) { // 关闭除当前页和home页的其他页
                let res = this.list.filter(item => item.name === this.currentRouteName)
                this.handleCloseTag(res, {})
                setTimeout(() => {
                    this.getTagElementByRoute(this.currentRouteName)
                }, 200)
            }
        },
        handleClose (route) { // 触发关闭单一标签 且如果关闭之前有动作就触发
            if (route.beforeCloseFun && route.beforeCloseFun in beforeCloseFun) {
                new Promise(beforeCloseFun[route.beforeCloseFun]).then(close => {
                    if (close) { this.close(route) }
                })
            } else {
                let res = this.list.filter(item => route.name !== item.name)
                this.handleCloseTag(res, route)
            }
        },
        handleCloseTag (res, route) { // 关闭标签 即重置数据
            if (res.length === 0 || route.name === this.currentRouteName) {
                const name = homePage
                this.$router.push({name})
            }
            this.$store.dispatch('route/setTagNavList', res)
        },
        isCurrentTag (item) { // 是否当前标签
            return this.currentRouteName === item.name
        },
        moveToView (tag) {
            const outerWidth = this.$refs.scrollOuter.offsetWidth
            const bodyWidth = this.$refs.scrollBody.offsetWidth
            if (bodyWidth < outerWidth) {
                this.tagBodyLeft = 0
            } else if (tag.offsetLeft < -this.tagBodyLeft) {
                // 标签在可视区域左侧
                this.tagBodyLeft = -tag.offsetLeft + this.outerPadding
            } else if (tag.offsetLeft > -this.tagBodyLeft && tag.offsetLeft + tag.offsetWidth < -this.tagBodyLeft + outerWidth) {
                // 标签在可视区域
                this.tagBodyLeft = Math.min(0, outerWidth - tag.offsetWidth - tag.offsetLeft - this.outerPadding)
            } else {
                // 标签在可视区域右侧
                this.tagBodyLeft = -(tag.offsetLeft - (outerWidth - this.outerPadding - tag.offsetWidth))
            }
        },
        getTagElementByRoute (route) {
            this.$nextTick(() => {
                this.refsTag = this.$refs.tagsPageOpened || []
                this.refsTag.forEach((item, index) => {
                    if (routeEqual(route, item.$attrs['data-route-item'])) {
                        let tag = this.refsTag[index].$el
                        this.moveToView(tag)
                    }
                })
            })
        },
        contextMenu (item, e) {
            if (item.name === homePage) { return }
            this.visible = true
            const offsetLeft = this.$el.getBoundingClientRect().left
            this.contextMenuLeft = e.clientX - offsetLeft + 10
            this.contextMenuTop = e.clientY - 64
        },
        closeMenu () {
            this.visible = false
        },
        turnToPage (route) {
            let { name, params, query } = {}
            if (typeof route === 'string') name = route
            else {
                name = route.name
                params = route.params
                query = route.query
            }
            this.$router.push({ name, params, query })
        },
        handleClick (item) {
            this.turnToPage(item)
        }
    },
    watch: {
        '$route' (to) {
            this.getTagElementByRoute(to)
        },
        visible (value) {
            if (value) {
                document.body.addEventListener('click', this.closeMenu)
            } else {
                document.body.removeEventListener('click', this.closeMenu)
            }
        }
    },
    mounted () {
        setTimeout(() => {
            this.getTagElementByRoute(this.$route)
        }, 200)
    }
}
</script>
<style lang="less">
@import './tags-nav.less';
</style>
